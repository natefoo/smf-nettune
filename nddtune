#!/bin/ksh
#
# Copyright (c) 2010 Nathan Coraor <nate@psu.edu>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#

. /lib/svc/share/smf_include.sh

fmri="${SMF_FMRI%:*}"

create_pg () {
    probe=`/usr/bin/svcprop -qp $1 $fmri`
    if [ $? -ne 0 ]; then
        /usr/sbin/svccfg -s $fmri addpg $1 $2
        if [ $? -ne 0 ]; then
            echo "Error: creating property group failed: $1" 2>&1 | smf_console
            exit $SMF_EXIT_ERR_FATAL
        fi
    fi
}

start_method () {

    # args
    defaults_pg=$1
    property_group=$2
    dev=$3
    property=$4
    proptype=$5
    propval=$6

    cur_propval=`/usr/sbin/ndd $dev $property`
    # nothing to change
    [ "$propval" -eq "$cur_propval" ] && return

    # if no default set, do it now
    probe=`/usr/bin/svcprop -qp $defaults_pg/$property $fmri`
    if [ $? -ne 0 ]; then
        /usr/sbin/svccfg -s $fmri setprop $defaults_pg/$property = $proptype: $cur_propval
        if [ $? -ne 0 ]; then
            echo "Error: unable to store default value: $property = $def_propval"
            exit $SMF_EXIT_ERR_FATAL
        fi
    fi

    # set it
    /usr/sbin/ndd -set $dev $property $propval
    if [ $? -ne 0 ]; then
        echo "Error: ndd failed"
        exit $SMF_EXIT_ERR_FATAL
    fi

}

stop_method () {

    # args
    defaults_pg=$1
    property_group=$2
    dev=$3
    property=$4

    def_propval=`/usr/bin/svcprop -p $defaults_pg/$property $fmri`
    cur_propval=`/usr/sbin/ndd $dev $property`
    # nothing to change
    [ "$def_propval" -eq "$cur_propval" ] && return

    # set it
    /usr/sbin/ndd -set $dev $property $def_propval
    if [ $? -ne 0 ]; then
        echo "Error: ndd failed"
        exit $SMF_EXIT_ERR_FATAL
    fi

}

main () {
    /usr/sbin/svccfg -s $fmri listpg | while read property_group property_group_type
    do
        [ "$property_group_type" != "application" ] && continue
        # create a pg for defaults (for stop method)
        defaults_pg="${property_group}_defaults"
        [ $1 = 'start' ] && create_pg $defaults_pg appdefaults
        # won't work for anything with an underscore in it, but hardly any devices
        # have one, and they're not tunable.
        dev=`echo "_$property_group" | sed -e 's#_#/#g'`
        /usr/bin/svcprop -p $property_group $fmri | while read line
        do
            # collect prop info
            set -A propstuff $line
            echo ${propstuff[0]} | IFS='/' read pg property
            proptype=${propstuff[1]}
            propval=${propstuff[2]}
            case "$1" in
                start)
                    start_method $defaults_pg $property_group $dev $property $proptype $propval
                    ;;
                stop)
                    stop_method $defaults_pg $property_group $dev $property
                    ;;
            esac
        done
        # update the running snapshot
        /usr/sbin/svcadm refresh $fmri
    done
}

case "$1" in
    start|stop)
        main $1
        ;;
    *)
        echo "usage: $0 start|stop"
        exit $SMF_EXIT_ERR_FATAL
        ;;
esac

exit $SMF_EXIT_OK
